step1 git init
step2 python -m venv venv
step3 source ./venv/Scripts/activate
step4 新增 .gitignore 和 .flaskenv 檔
step5 pip install flask
step6 pip install python-dotenv
step7 新增 app.py 檔
step8 編輯 app.py, 生成第一個路由, hello world
step9 flask run
step10 不使用 flask-restful, 建立 user_list, 然後練習 get 與 post
step11 在 post 方法中加入過濾, 不讓帳號重複
step12 再加入一個路由, 聆聽 delete, 在聆聽 put 方法
step13 git add -A git commit -m "使用flask去實現一個API"
-------------------------------------------------------------------------------------
step14 pip install flask-restful
step15 簡單寫一個 HelloWorld 與 HelloName 的例子
step16 git add -A git commit -m "使用套件flask-restful寫一個簡單的HelloWorld API"
-------------------------------------------------------------------------------------
step17 先在 Postman 設計 API 的功能
step18 實現 /users 的 GET 與 POST 方法
step19 實現 /user/<string:uername> 的 GET、PUT、PATCH、DELETE 方法 (註: 這裡還沒教到如何判斷 email 或密碼是否合法, 之後會教)
step20 git add -A git commit -m "使用套件flask-restful去操作CRUD"
-------------------------------------------------------------------------------------
step21 第一次代碼重構, 把 app.py 升級成 package Hotel, 把 Resource 移動到自己的 package resource, 記得更新 .flaskenv 與 Flask("Hotel")
step22 使用 Workbench 練習操作 sql-demo.sql
step23 pip install flask-sqlalchemy 跟擴展 app
step24 建立 model 的 package, 且建立 table UserModel
step25 第二次代碼重構, 使用工廠函數 create_app()
step26 pip install flask-migrate, 使用 migrate = Migrate(app, db) 擴展
step27 在生成資料庫跟資料表前, 要把 table import 進來 __init__.py 構造文件, 且要注意放置的位置要在 db 之後
step28 查看 flask db --help
step29 flask db init(資料庫初始化) -> flask db migrate(查看新增項目, 且新增版本) -> flask db upgrade(轉換版本)
step30 要使用 Mysql 要先 pip install pymysql
step31 輸入 app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://帳號:密碼@localhost:3306/資料庫', 啟動前要先在 Mysql 裡面建立對應的資料庫
step32 因為已經有了 migrations 的資料夾跟版本, 所以不需要在 flask db init, 可以直接 flask db upgrade
step33 觀看 sqlalchemy 的插入、讀取、修改、刪除, 且在 UserModel 的 table 中加入 __repr__ 函數
step34 因為現在要在 resource 裡面引入 model, 所以 __init__.py 與 resource 的 user.py 檔的配置要稍微修改。還需要在 resource 的 user.py 中引入 db
step35 先修改 UserList 的 get 與 User 的 get。 先在 UserModel 裡加入 as_dict() 方法, 再開始修改
step36 再修改 UserList 的 post 與 User 的 put、patch、delete 方法
step37 git add -A git commit -m "使用套件flask-sqlalchemy去操作CRUD"
-----------------------------------------------------------------------------------------
step38 第三次代碼重構, 建立 config.py 檔, 把 app.config 有關的移動到 config.py 檔寫成 class, 再用 app.config.from_object 導入
step39 在 UserModel 加入 set_password() 與 check_password() 方法
step40 觀看 password 的 hash 實現
step41 修改 resource 的 user.py, 把跟密碼有關的都用 set_password() 修改
step42 觀看 Token認證, JWT Token 的介紹
step43 pip install pyjwt 
stpe43 獲取 Token, 首先先在 UserModel 裡新增一個方法 generate_token(), 記得到 config.py 設置 SECRET_KEY
step44 在 resource 裡面新增 auth.py 且加入 Login 資源
step45 回到 __init__.py 檔註冊 Login 資源
step46 使用 Token(), 在 resource 的 UserList 類中的 get 方法加入 Token 驗證
step47 git add -A git commit -m "使用套件 pyjwt 去實現 Token 的認證"
-----------------------------------------------------------------------------------------
step48 觀看 flask_jwt 的使用
step49 pip install flask-jwt
step50 參觀 flask_jwt 的官網, 看看 configuration options 有哪些
step51 先在 config.py 檔中加入 SECRET_KEY = "flask123" 與 JWT_EXPIRATION_DELTA = timedelta(seconds=300)
step52 編輯 UserModel 加入 authenticate() 與 identity() 方法
step52 編輯 __init__.py 建構文件 擴展 JWT(None, UserModel.authenticate, UserModel.identity), 且 login.py 可以刪掉
step53 也可以在 resource 資料夾內把 UserList 內的之前的 Jwt 用法刪掉, 直接改用裝飾器 @jwt_required(), 只要有這個裝飾器, 都要帶 Token
step54 又再 config.py 檔中加入更更多 configuration, 像 JWT_AUTH_URL_RULE = "/auth/login" 與 JWT_AUTH_HEADER_PREFIX = "FLASK"
step55 git add -A git commit -m "使用套件 flask-jwt 去實現 Token 的認證"
------------------------------------------------------------------------------------------------------
step56 第四次代碼重構, 在 model 的 user.py 中加入 get_by_username、add、update、delete、get_by_id 方法, 且更新 resource 的 user.py 檔, 使跟 db 無關
step57 git add -A git commit -m "代碼重構"
------------------------------------------------------------------------------------------------------
step58 在 model 內加入新的檔案 tweet.py 且新增 table Tweet, 這樣 UserModle 與 Tweet 就是一對多的關係
step59 編輯 __init__.py 檔, 把 table Tweet 加進來, 也就是 from Hotel.model.tweet import Tweet
step60 觀看 flask shell 的 table 測試
step61 在 resource 資料夾內加入 tweet.py 檔, 編寫 Tweet 資源, 加入 get 與 post 方法
step62 編輯 __init__.py 檔, 幫資源 Tweet 註冊, api.add_resource(Tweet, "/tweet/<string:username>")
step64 pip install python-dateutil, 要用來把 tweet 出來的世界協調時間當地化
step65 在 resource 資料夾中的 tweet.py 檔中, 幫 get 與 post 方法加入權限認證
step66 git add -A git commit -m "加入tweet資源"
--------------------------------------------------------------------------------------------------------
step67 pip install cryptography, 不然連接 MySQL 時會有以下的例外產生, 'cryptography' package is required for sha256_password or caching_sha2_password auth methods
step68 加入權限細分, 比如在操作 post /tweets/Crysyal 時, 你所帶的 Token 的帳號要是跟 Crystal 一樣 
step69 幫我們 /user/<username> 的 DELETE、PUT、PATCH 加上權限再細分, 除了 post /users 不用權限, 其他的先 @jwt_required() 就好
step70 git add -A git commit -m "JWT Token 權限細分"
---------------------------------------------------------------------------------------------------------
step71 在 UserModel 加入 from_admin 字段, 讓權限又多了管理員的身分
step72 flask db migrate -> flask db upgrade
step73 編輯 __init.py 檔, 加入 register_commands() 函數, 並註冊
step74 flask admin 加入管理員
step75 git add -A git commit -m "權限再細分, 加入管理員"
----------------------------------------------------------------------------------------------------------
step76 第五次代碼重購, 因為 model 裡面的 class 裡面的方法很多重複, 我們可以寫個 Base 類, 再讓他們繼承, 減少重複
step77 在 model 新增 base.py 檔, 把一樣的方法移動到 Base, 然後 User 跟 Tweet 換繼承 Base
step78 git add -A git commit -m "代碼重購"
----------------------------------------------------------------------------------------------------------
step77 在 resource 的 tweet.py 檔新增資源 TweetList, 可以拿到全部留言
step78 在 __init__.py 構造文件註冊資源 TweetList, 我們這個資源目前沒加權限, 不代 Token 也可以 GET
step79 在 Model 的 user.py 與 tweet.py 加入 cascade (級聯操作), 只要帳號被刪掉, 跟他有關的留言也會跟這被刪除, 注意 cascade 該放的地方
step80 不需要再 flask migrate 跟 flask upgrade
step81 git add -A git commit -m "新增 TweetList 資源, 與加入 cascade 級聯操作"
----------------------------------------------------------------------------------------------------------
step82 在 model 新增 style.py 檔, 加入 class StyleModel
step83 在 model 新增 room.py 檔, 加入 class RoomModel
step84 注意 StyleModel   1 <--------->多 RoomModle 多 <----------------> 1 UserModel 1 <---------------->多 TweetModel
step84 在 __init__.py 構造文件 import StyleModel 與 RoomModel 進來
step85 flask db migrate -> flask db upgrade
step86 git add -A git commit -m "新增 StyleModel 與 RoomModel"
